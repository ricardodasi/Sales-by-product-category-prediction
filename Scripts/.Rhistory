results
source('C:/Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Scripts/Product predictions R file.R', echo=TRUE)
results
pr<- predict(mods,testing)
pr
testing$predictions<- pr
testing
View(testing)
testing$Relative.error <- abs(testing$Volume-testing$predictions)/testing$Volume
View(testing)
ggplot(testing, aes(x = Volume, y = Relative.error)) + geom_point()
testing$Relative.error <- (abs(testing$Volume-testing$predictions)/testing$Volume)100%
testing$Relative.error <- abs(testing$Volume-testing$predictions)/testing$Volume
ggplot(testing, aes(x = Volume, y = Relative.error)) + geom_point()
results
results
for (i in lin){
fitcontrol <- trainControl(method = 'cv')
mods <- train(Volume~.,
data = training,
method = lin,
trcontrol = fitcontrol)
pr<- predict(mods,testing)
results<-postResample(pr,testing$Volume)
comparison <-cbind(comparison,results)
}
colnames(comparison)<-lin
source('C:/Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Scripts/Product predictions R file.R', echo=TRUE)
comparison
results
ggplot(testing, aes(x = Volume, y = Relative.error)) + geom_point(size = 2,
shape = 2)
ggplot(testing, aes(x = Volume, y = Relative.error)) + geom_point(size = 2,
shape = 4)
ggplot(testing, aes(x = Volume, y = Relative.error)) + geom_point(size = 2,
shape = 10)
ggplot(testing, aes(x = Volume, y = Relative.error)) + geom_point(size = 2,
shape = 20)
ggplot(testing, aes(x = Volume, y = Relative.error)) + geom_point(size = 2,
shape = 15)
ggplot(testing, aes(x = Volume, y = Relative.error)) + geom_point(size = 2,
shape = 15,
color = 'red')
ggplot(testing, aes(x = Volume, y = Relative.error)) + geom_point(size = 2,
shape = 15,
color = 'lightblue')
ggplot(testing, aes(x = Volume, y = Relative.error)) + geom_point(size = 2,
shape = 15,
color = 'darkblue')
ggplot(testing, aes(x = Volume, y = Relative.error)) + geom_point(size = 4,
shape = 15,
color = 'darkblue')
ggplot(testing, aes(x = Volume, y = Relative.error)) + geom_point(size = 3,
shape = 15,
color = 'darkblue')
ggplot(testing, aes(x = Volume, y = Relative.error)) + geom_point(size = 3,
shape = 15,
color = 'darkblue')+
sp+
stat_density_2d()
ggplot(testing, aes(x = Volume, y = Relative.error)) + geom_point(size = 3,
shape = 15,
color = 'darkblue')+
stat_density_2d()
ggplot(testing, aes(x = Volume, y = Relative.error)) + geom_point(size = 3,
shape = 15,
color = 'darkblue')
new.products<- read.csv('c://Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Data Sets/newproductattributes2017.csv')
sumamry(new.products)
summary(new.products)
abs(0.8-((-0.2)))
0.2/1
0.2/1
1/0.2
abs(0.8-((0.2)))
0.6/0.2
abs(0.8-0.2)
0.6/0.2
0.2*300%
0.8-(-0.2)
1/-0.2
0.8-0.2
0.6/0.2
0.2*3
-0.2*5
-0.2*(1+5)
-0.2*(1+5)
View(existing.product.attributes)
View(ready.data)
new.products<- new.products[,c(14,16,18,20,21,28)]
View(new.products)
new.products<- new.products[,c(3,5,7,9,10,18)]
predictctions.new.products<- predict(svm.model,new.products)
predictctions.new.products
new.products$Volume<- predictctions.new.products
ggplot(data = new.products, aes(x=Volume))+geom_hist()
ggplot(data = new.products, aes(x=Volume))+geom_histogram()
ggplot(data = new.products, aes(x=Volume,y = price))+geom_point()
ggplot(data = new.products, aes(x=Volume,y = Price))+geom_point()
svm.model <- train(Volume ~0+.,
data = training,
method = "svmLinear",
trcontrol = fitcontrol.2
)
pr<- predict(mods,testing)
results<-postResample(pr,testing$Volume)
testing$predictions<- pr
testing$Relative.error <- abs(testing$Volume-testing$predictions)/testing$Volume
ggplot(testing, aes(x = Volume, y = Relative.error)) + geom_point(size = 3,
shape = 15,
color = 'darkblue')
#after plotting the error, we find that the model fails with higher error and consistency
#around lower volumes, this is good for the intended analisys as we are trying to predict
#the products who will have higher sales volume/profit
#we load the final file and proceed to do the predictions with the model ####
new.products<- read.csv('c://Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Data Sets/newproductattributes2017.csv')
#prepare the data and predict the results
new.products<- new.products[,c(3,5,7,9,10,18)]
predictctions.new.products<- predict(svm.model,new.products)
new.products$Volume<- predictctions.new.products
#plot the results
ggplot(data = new.products, aes(x=Volume,y = Price))+geom_point()
source('C:/Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Scripts/Product predictions R file.R', echo=TRUE)
source('C:/Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Scripts/Product predictions R file.R', echo=TRUE)
svm.model <- train(0 +Volume ~ .,
data = training,
method = "svmLinear",
trcontrol = fitcontrol.2
)
pr<- predict(mods,testing)
results<-postResample(pr,testing$Volume)
testing$predictions<- pr
testing$Relative.error <- abs(testing$Volume-testing$predictions)/testing$Volume
ggplot(testing, aes(x = Volume, y = Relative.error)) + geom_point(size = 3,
shape = 15,
color = 'darkblue')
new.products<- read.csv('c://Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Data Sets/newproductattributes2017.csv')
#prepare the data and predict the results
new.products<- new.products[,c(3,5,7,9,10,18)]
predictctions.new.products<- predict(svm.model,new.products)
new.products$Volume<- predictctions.new.products
#plot the results
ggplot(data = new.products, aes(x=Volume,y = Price))+geom_point()
#we got negative results, we need to check this  try other models, train with the dummy
View(new.products)
comparison
fitcontrol.3 <- trainControl(method = 'boot',
number = 1000)
knn.model <- train(Volume ~ .,
data = training,
method = "knn",
trcontrol = fitcontrol.3
)
pr.2<- predict(mods,testing)
results<-postResample(pr.2,testing$Volume)
results
pr.2
new.products$Volume<- pr.2
pr.2<- predict(mods,testing)
pr.2
source('C:/Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Scripts/Product predictions R file.R', echo=TRUE)
source('C:/Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Scripts/Product predictions R file.R', echo=TRUE)
new.products$Volume<- predictctions.new.products
new.products$Volume
View(new.products)
results
postResample(pr,testing$Volume)
comparison
source('C:/Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Scripts/Product predictions R file.R', echo=TRUE)
comparison
results
results
View(testing)
ggplot(testing, aes(x = Volume, y = Relative.error)) + geom_point(size = 3,
shape = 15,
color = 'darkblue')
comparison
fitcontrol.2 <- trainControl(method = 'cv')
svm.model <- train(Volume ~ .,
data = training,
method = "svmLinear",
trcontrol = fitcontrol.2
)
pr<- predict(svm.model,testing)
result
results<-postResample(pr,testing$Volume)
results
fitcontrol.2 <- trainControl(method = 'boot',
number = 1000)
svm.model <- train(Volume ~ .,
data = training,
method = "svmLinear",
trcontrol = fitcontrol.2
)
pr<- predict(svm.model,testing)
results<-postResample(pr,testing$Volume)
results
results
fitcontrol.2 <- trainControl(method = 'boot',
number = 1000)
svm.model <- train(Volume ~ .,
data = training,
method = "svmLinear",
trcontrol = fitcontrol.2
)
pr<- predict(svm.model,testing)
results.2<-postResample(pr,testing$Volume)
results.2
source('C:/Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Scripts/Product predictions R file.R', echo=TRUE)
results.2
comparison
results.2
source('C:/Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Scripts/Training the SVM alone.R', echo=TRUE)
newDataFrame <- dummyVars(" ~ .", data = existing.product.attributes)
ready.data <- data.frame(predict(newDataFrame, newdata = existing.product.attributes))
View(ready.data)
ready.data<- ready.data[,c(1,2,3,4,5,6,7,8,9,10,11,12,14,16,18,20,21,29)]
View(ready.data)
set.seed(123)
intraining <- createDataPartition(ready.data$Volume,
p=0.70,
list = FALSE)
training <- ready.data[intraining,]
testing <- ready.data[-intraining,]
lin <-c('svmLinear','rf','knn')
comparison<-c()
for (i in lin){
fitcontrol <- trainControl(method = 'cv')
mods <- train(Volume~.,
data = training,
method = lin,
trcontrol = fitcontrol)
pr<- predict(mods,testing)
results<-postResample(pr,testing$Volume)
comparison <-cbind(comparison,results)
}
colnames(comparison)<-lin
comparison
ggplot(training, aes(x=volume)) + geom_histogram()
ggplot(training, aes(x=volume)) + geom_histogram()
ggplot(training, aes(V=volume)) + geom_histogram()
ggplot(training, aes(x=Volume)) + geom_histogram()
training$Volume <-training$Volume[-which(training$Volume>=6000 ),]
training <-training[-which(training$Volume>6000),]
training <-training[-which(training$Volume>6000),]
for (i in lin){
fitcontrol <- trainControl(method = 'cv')
mods <- train(Volume~.,
data = training,
method = lin,
trcontrol = fitcontrol)
pr<- predict(mods,testing)
results<-postResample(pr,testing$Volume)
comparison <-cbind(comparison,results)
}
colnames(comparison)<-lin
comparison
training
View(training)
debugSource('C:/Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Scripts/Training the SVM alone.R', echo=TRUE)
source('C:/Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Scripts/Training the SVM alone.R', echo=TRUE)
comparison
View(testing)
View(training)
ggplot(training, aes(x=Volume)) + geom_histogram()
#for loop for testing ####
lin <-c('svmLinear','rf','knn')
comparison<-c()
for (i in lin){
fitcontrol <- trainControl(method = 'cv')
mods <- train(Volume~.,
data = training,
method = lin,
trcontrol = fitcontrol)
pr<- predict(mods,testing)
results<-postResample(pr,testing$Volume)
comparison <-cbind(comparison,results)
}
colnames(comparison)<-lin
comparison
comparison
svm.model<- train(Volume ~.,
data = training,
method = 'svmLinear',
trcontrol = fitcontrol)
testing.predictions <-  predict(svm.model,testing)
testing.results <- postResample(testing.predictions,testing$Volume)
source('C:/Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Scripts/Training the SVM alone.R', echo=TRUE)
testing.results
testing.predictions
source('C:/Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Scripts/Training the SVM alone.R', echo=TRUE)
testing.results
testing.results
testing.predictions
source('C:/Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Scripts/Training the SVM alone.R', echo=TRUE)
warinings()
warnings()
summary(svm.model)
view(svm.model)
svm.model
plot(svm.model)
plot(svm.model)
testing.predictions
testing.results
source('C:/Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Scripts/Training the SVM alone.R', echo=TRUE)
testing.results
testing.predictions
source('C:/Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Scripts/Training the SVM alone.R', echo=TRUE)
testing.results
testing.results
fitcontrol <- trainControl(method = 'boot',number = 1000)
knn.model<- train(0 + Volume ~.,
data = training,
method = 'knn',
trcontrol = fitcontrol)
testing.predictions <-  predict(svm.model,testing)
testing.results <- postResample(testing.predictions,testing$Volume)
source('C:/Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Scripts/Training the SVM alone.R', echo=TRUE)
source('C:/Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Scripts/Training the SVM alone.R', echo=TRUE)
testing.predictions
testing.results
View(testing)
ggplot(training, aes(x=x4StarReviews)) + geom_histogram()
training <-training[-which(training$x4StarReviews>80),]
ggplot(training, aes(x=x4StarReviews)) + geom_histogram()
fitcontrol <- trainControl(method = 'boot',number = 1000)
knn.model<- train(0 + Volume ~.,
data = training,
method = 'knn',
trcontrol = fitcontrol)
testing.predictions <-  predict(knn.model,testing)
testing.results <- postResample(testing.predictions,testing$Volume)
testing.results
ggplot(training, aes(x=x2StarReviews)) + geom_histogram()
training <-training[-which(training$x2StarReviews>15),]
ggplot(training, aes(x=x2StarReviews)) + geom_histogram()
testing.results
fitcontrol <- trainControl(method = 'boot',number = 1000)
knn.model<- train(0 + Volume ~.,
data = training,
method = 'knn',
trcontrol = fitcontrol)
testing.predictions <-  predict(knn.model,testing)
testing.results <- postResample(testing.predictions,testing$Volume)
testing.results
ggplot(training, aes(x=price)) + geom_histogram()
#Load the libraries ####
pacman::p_load(caret,mlbench,plotly,ggplot2)
#load the first data set ####
existing.product.attributes <- read.csv(
'c://Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Data Sets/existingproductattributes2017.csv'
)
#Dummify the data ####
newDataFrame <- dummyVars(" ~ .", data = existing.product.attributes)
ready.data <- data.frame(predict(newDataFrame, newdata = existing.product.attributes))
#me quedo con las dummy y quito las otras que no sirven ####
ready.data<- ready.data[,c(1,2,3,4,5,6,7,8,9,10,11,12,14,16,18,20,21,29)]
#create data partition and set seed ####
set.seed(123)
intraining <- createDataPartition(ready.data$Volume,
p=0.70,
list = FALSE)
training <- ready.data[intraining,]
testing <- ready.data[-intraining,]
#preprocessing ####
#Checking Volume
ggplot(training, aes(x=Volume)) + geom_histogram()
#take out volume outliers
training <-training[-which(training$Volume>6000),]
#checking 4 star reviews
ggplot(training, aes(x=price)) + geom_histogram()
ggplot(training, aes(x=price)) + geom_histogram()
ggplot(training, aes(x=Price)) + geom_histogram()
training <-training[-which(training$Price>2000),]
ggplot(training, aes(x=Price)) + geom_histogram()
fitcontrol <- trainControl(method = 'boot',number = 1000)
knn.model<- train(0 + Volume ~.,
data = training,
method = 'knn',
trcontrol = fitcontrol)
testing.predictions <-  predict(knn.model,testing)
testing.results <- postResample(testing.predictions,testing$Volume)
testing.results
training <-training[-which(training$Price>1000,]
ggplot(training, aes(x=Price)) + geom_histogram()
training <-training[-which(training$Price>1000,]
training <-training[-which(training$Price>1000),]
ggplot(training, aes(x=Price)) + geom_histogram()
fitcontrol <- trainControl(method = 'boot',number = 1000)
knn.model<- train(0 + Volume ~.,
data = training,
method = 'knn',
trcontrol = fitcontrol)
testing.predictions <-  predict(knn.model,testing)
testing.results <- postResample(testing.predictions,testing$Volume)
testing.results
#for loop for testing ####
lin <-c('svmLinear','rf','knn')
comparison<-c()
for (i in lin){
fitcontrol <- trainControl(method = 'cv')
mods <- train(Volume~.,
data = training,
method = lin,
trcontrol = fitcontrol)
pr<- predict(mods,testing)
results<-postResample(pr,testing$Volume)
comparison <-cbind(comparison,results)
}
colnames(comparison)<-lin
comparison
testing.results
View(training)
ggplot(training, aes(x=PositiveServiceReview)) + geom_histogram()
training <-training[-which(training$PositiveServiceReview>200),]
ggplot(training, aes(x=PositiveServiceReview)) + geom_histogram()
fitcontrol <- trainControl(method = 'boot',number = 1000)
knn.model<- train(0 + Volume ~.,
data = training,
method = 'knn',
trcontrol = fitcontrol)
testing.predictions <-  predict(knn.model,testing)
testing.results <- postResample(testing.predictions,testing$Volume)
testing.results
source('C:/Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Scripts/Training the SVM alone.R', echo=TRUE)
testing.results
ggplot(training, aes(x=NegativeServiceReview)) + geom_histogram()
training <-training[-which(training$NegativeServiceReview>10),]
ggplot(training, aes(x=NegativeServiceReview)) + geom_histogram()
fitcontrol <- trainControl(method = 'boot',number = 1000)
knn.model<- train(0 + Volume ~.,
data = training,
method = 'knn',
trcontrol = fitcontrol)
testing.predictions <-  predict(knn.model,testing)
testing.results <- postResample(testing.predictions,testing$Volume)
testing.results
source('C:/Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Scripts/Training the SVM alone.R', echo=TRUE)
testing.results
testing.predictions
source('C:/Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Scripts/Training the SVM alone.R', echo=TRUE)
testing.results
source('C:/Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Scripts/Training the SVM alone.R', echo=TRUE)
testing.predictions
testing.results <- postResample(testing.predictions,testing$Volume)
testing.results
source('C:/Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Scripts/Training the SVM alone.R', echo=TRUE)
testing.results <- postResample(testing.predictions,testing$Volume)
testing.results
testing$predictions<- testing.predictions
View(testing)
testing$relative.error<- abs(testing$Volume-testing$predictions)/testing$Volume
testing$predictions<- testing.predictions
testing$relative.error<- abs(testing$Volume-testing$predictions)/testing$Volume
ggplot(testing,aes(x=volume,y=testing$relative.error)) + geom_point()
ggplot(testing,aes(x=Volume,y=testing$relative.error)) + geom_point()
write.csv(testing,'Testing data after KNN method with predictions.csv')
new.products<- read.csv('c://Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Data Sets/newproductattributes2017.csv')
predict(knn.model,new.products)
newDataFrame.2 <- dummyVars(" ~ .", data = new.products)
new.product.dummy <- data.frame(predict(newDataFrame.2, newdata = new.products))
final.predictions<- predict(knn.model,new.product.dummy)
new.product.dummy$Volume<- final.predictions
new.product.dummy
View(new.product.dummy)
write(new.product.dummy,"Final predictions.csv")
write.csv(new.product.dummy,'Final predictions.csv')
ggplot(testing,aes(x=Volume,y=testing$relative.error)) + geom_point()
ggplot(testing,aes(x=Volume,y=testing$relative.error)) + geom_point()
source('C:/Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Scripts/Training the SVM alone.R', echo=TRUE)
ggplot(testing,aes(x=Volume,y=testing$relative.error)) + geom_point()
geom_text(label =rownames(testing))
ggplot(testing,aes(x=Volume,y=testing$relative.error)) + geom_point()+
geom_text(label =rownames(testing))
ggplot(testing,aes(x=Volume,y=testing$relative.error)) + geom_point()+
geom_text(label =colnames(testing))
ggplot(testing,aes(x=Volume,y=testing$relative.error)) + geom_point()+
geom_text(label =colnames(testing))
ggplot(testing,aes(x=Volume,y=testing$relative.error)) + geom_point()+
geom_text(label =colnames(testing))
testing$original.cat<- existing.product.attributes$ProductType[-intraining,]
ggplot(testing,aes(x=Volume,y=testing$relative.error)) + geom_point()
+ geom_text()
+ geom_text(rownames = testing)
+ geom_text(label = rownames(testing) )
ggplot(testing,aes(x=Volume,y=testing$relative.error)) + geom_point()+
geom_text(label = rownames(testing) )
ggplot(testing,aes(x=Volume,y=testing$relative.error)) + geom_point()+
geom_text(label = rownames(testing), size =6 )
ggplot(testing,aes(x=Volume,y=testing$relative.error)) + geom_point()+
geom_text(label = rownames(testing), size =5 )
View(ready.data)
View(new.data.frame)
View(testing)
ggplot(testing,aes(x=volume,y=(abs(testing.predictions-testing$Volume)))+ geom_point()
ggplot(testing,aes(x=volume,y=(abs(testing.predictions-testing$Volume)))+ geom_point()
View(testing)
testing$predictions<- testing.predictions
testing$relative.error<- abs(testing$Volume-testing$predictions)/testing$Volume
ggplot(testing,aes(x=Volume,y=testing$relative.error)) + geom_point()
testing.error<-abs(testing$Volume-testing$predictions)
ggplot(testing,aes(x=volume,y=error))+ geom_point()
debugSource('C:/Users/riqui/Desktop/Ubiqum course/Project 5/Prediction of products by brand/Scripts/Training the SVM alone.R', echo=TRUE)
ggplot(testing,aes(x=volume,y=error))+ geom_point()
ggplot(testing,aes(x=Volume,y=error))+ geom_point()
testing.error<-abs(testing$Volume-testing$predictions)
ggplot(testing,aes(x=Volume,y=error))+ geom_point()
View(testing)
testing.error<-abs(testing$Volume-testing$predictions)
testing$error<-abs(testing$Volume-testing$predictions)
ggplot(testing,aes(x=Volume,y=error))+ geom_point()
ggplot(testing,aes(x=Volume,y=error))+ geom_point()+ geom_smooth(method=lm, se=FALSE)
